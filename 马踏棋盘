
#include "pch.h"
#include <iostream>

using namespace std;
const int Maxstep = 64;
const int HTry1[] = { 2,1,-1,-2,-2,-1,1,2},
		  HTry2[] = { 1,2,2,1,-1,-2,-2,-1};
int foot[8][8] = { 0 }; //记录每个位置是否有足迹

struct PosType //坐标
{
	int x;
	int y;
};

struct Route
{
	int ord; //该步骤在路线上的序号
	PosType seat; //此落点的坐标
	int h; //下一步骤的方向(0到7)
};//栈的元素类型

struct SqStack
{
	Route *base;
	Route *top;
	int datasize; //栈中元素数量
};//栈结构

int isExist(struct PosType seat, int h)
{
	//检查对于当前坐标seat来说，h的方向是否合理
	int x, y;
	x = seat.x + HTry1[h];
	y = seat.y + HTry2[h];
	if (x<8 && x>-1 && y<8 && y>-1)
		return 1;
	else
		return 0;
}

int Pass(struct SqStack *S)
{
	//根据栈顶元素判断下个方向是否合理且没有足迹
	if (isExist(S->top->seat, S->top->h)) //如果合理
	{
		if (!foot[S->top->seat.x + HTry1[S->top->h]][S->top->seat.y + HTry2[S->top->h]]) //如果没有足迹
			return 1;
		else
			return 0;
	}
	else
		return 0;
}

void Pop(struct SqStack *S)
{
	//弹出S栈顶元素
	if (S->datasize == 1) //如果只剩下1个元素,找不到合适的路径栈
	{
		S->datasize = 0;
		S->top->ord = 0;
	}
	else
	{
		foot[S->top->seat.x][S->top->seat.y] = 0;
		S->top--;
		S->datasize--;
		if (S->top->h >= 7) //如果弹出后的顶端结点方向为7，则继续弹出
			Pop(S);
		else
			S->top->h++;
	}
		
}

void Push(struct SqStack *S)
{
	//入栈，方向按照栈顶元素所指方向
	(S->top + 1)->seat.x = S->top->seat.x + HTry1[S->top->h];
	(S->top + 1)->seat.y = S->top->seat.y + HTry2[S->top->h];
	(S->top + 1)->ord = S->top->ord + 1;
	S->top++;
	S->top->h = 0;
	S->datasize++;
	foot[S->top->seat.x][S->top->seat.y] = 1; //留下足迹
}

struct SqStack *SearchPath(PosType start)
{
	//搜索马踏遍棋盘的路径，返回搜到的第一个路径
	//棋盘8*8
	SqStack *S = new SqStack; //栈S储存路径

	S->base = new Route[Maxstep+1];
	S->base->seat = start; //加入起点
	S->base->ord = 1;
	S->top = S->base; //Top指针指向栈顶元素
	S->datasize = 1;
	S->base->h = 0; //假设初始方向0

	foot[S->base->seat.x][S->base->seat.y] = 1;

	int over = 0;
	while (S->datasize < 64)
	{
		if (Pass(S)) //如果下个位置合理且无足迹
		{
			// 加入路径栈S
			Push(S);

			if (S->datasize == 64) //踏遍则结束
				over = 1;
		}
		else
		{
			if (S->top->h >= 7)
				Pop(S);
			else
				S->top->h++;

			if (S->datasize == 0)
				over = 1;
		}
		if (over)
			break;
	}
	return S;
}

void PrintStack(struct SqStack *S)
{
	int path[8][8]; //路径矩阵
	Route *p;
	p = S->base;
	if (S->datasize == 0)
		cout << "no path!!!" << endl;
	else
	{
		for (int i = 1; i <= 64; ++i)
		{
			path[p->seat.x][p->seat.y] = i;
			p++;
		}

		for (int i = 0; i < 8; ++i)
		{
			for (int j = 0; j < 8; ++j)
				cout << path[i][j] << ' ';
			cout << endl;
		}
	}
}

int main()
{
	PosType start;
	SqStack *Path; //储存搜寻到的路径栈

	int over = 0;
	for (int i = 0; i < 8; ++i)
	{
		for (int j = 0; j < 8; ++j)
		{
			start.x = i;
			start.y = j;
			Path = SearchPath(start);
			if (Path->datasize != 0)
			{
				over = 1;
				break;
			}
		}
		if (over == 1)
			break;
	}
	PrintStack(Path);
	return 0;
}
